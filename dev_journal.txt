# Nov 1 #
I have just read the theme for the jam, which is Bug! I feel like I have seen a
lot of "Intentional glitch" themed games recently, so I want to avoid that. I'm
also new to this and too worried about unintentional glitches to confidently
use that theme.

But they have also invited people to interpret Bug! in whatever way works best,
to include inventing an acronym. So here's some thoughts:

-Lead a colony of bugs to food with pheromone trails.
-Give players bad solutions to puzzles to debug.
-Agitate a character until they fail a task.
-An idle mosquito slapper?
-Back Up Generator. Repair the generator before you freeze.
-Beyond Unknown Galaxies. Space exploration?
-Beetle-drawn chariot racing game with fun, slide-y physics.
-A disease spreading? Maybe too on the nose.

My initial thoughts are that I loved Sim Ant as a kid so the insect ideas are
attractive to me. Another consideration is that the assets need to be public, or
made by me. An insect theme could use a bunch of each to draw sprites, so that's
another mark in favor of that approach. Maybe I can combine a few?

I'm also thinking about my development environment now. I joined this to learn
Godot and with a whole month I should be able too. But I'm also getting a little
case of cold feet. I'm pretty familiar with Python, and if I stay with Pygame
I'm confident that I could add some pretty cool AI to my bugs. I don't know if
I'm going to be able to do that in Godot. Probably yes...

With 30 days to work, I think the best idea is to sleep of the theme for
tonight.

# Nov 1 p.s. #
Bug out!

# Nov 2 #
I remembered the phrase "bug out" yesterday evening and really like it as a
setup for a game. The user will have some limited time period to collect as
many useful items as possible in a short time limit. Their score is the sum of
the items that they collect in the time period if they reach their bunker, or
zero if they explode.

I really like the idea of running with "Bug Out", but I'll have to thematically
distinguish this game from several other "collect stuff and go to bunker" games
that have been popular over the last couple of years. "Bug out" is usually used
to mean leaving an area, so maybe this is a "grab stuff and flee" game rather
than a "grab stuff and shelter" game. I can also drag in one or two of the other
theme concepts. Maybe a bug is fleeing an exterminator or a player has five
minutes to collect tool, and then has to fix a generator with whatever they
grabbed.

So, concept is moving in the right direction. I also had an idea for the
gameplay and I don't know yet if it's a terrible idea or not. I'm thinking about
making a text-based game. Maybe a few graphics, but almost entirely text.
Writing a text parser can be a bunch of work but I'm pretty confident with this
class of problem I think I can steal some old code from a compilers class. Plus,
it always good to brush up on regex a little. So here's the arguments in favor
or a text game:
  -I think the game will stand out from the other 6000 entries in the Game Off.
   Maybe not in a good way, but we should be one of very few text entries.
  -Since I can't use paid assets, I'm expecting to have to draw a lot of the
   artwork myself (or find public assets). I have very little confidence in my
   ability to draw, but a lot of confidence in my ability to write and code. A
   text based game actually seems like a good way to play to my strengths.

The best argument against making a text based game is that I signed up for this
jam to learn Godot. I've checked and Godot does support text IO, but this
probably isn't the best introduction to a platform that's made for, like
animated sprites and things like that. Then again, this might be a good way to
learn Godot slowly without getting lost in the weeds of physics and animation.

# Nov 3 #
I've gone all in on the text based game. Luckily I have found a good youtube
tutorial series here: https://youtu.be/wCI650TDhHA. It turns out text processing
is actually very well supported in Godot, so this is a reasonable approach.

I have fleshed out some more of the basic plot of the game in my head. The
player is an ant who smells an exterminator coming and has ten minutes to
collect supplies and flee the hive. The player can convince other ants to flee
the hive as well. Getting enough ants to join makes it possible to take the
queen as well. The player will get a score based on the number of ants that
joined and the amount of supplies collected. Different scores will trigger
different win screens. I'll figure out exactly what later on, but basically:
  -alone plus no supplies = dead
  -alone with supplies = selfish
  -some ants but no queen = struggle
  -with queen = happy ending

The more I think about the game, the more I think it should have some humorous
elements for players to find. I think the ants will have silly names and there
will be one or two exterminator denier ants in the hive. The exterminator denier
ants are going to be a little jab at climate/covid deniers which does run a risk
of irritating some of my players. But if I'm reading the room right, it's a gag
that should come off pretty well.

I've jumped straight into some elements of implementation, but mostly just to
make sure that my ideas are feasible. I want to get the IO, text parser, and
room generator figured out within the next week. That way I'll still have time
to pivot if it turns out anything is completely unfeasible. But, I want to spend
some solid time planning before I really get into the specifics of
implementation. I want to have the game completely sketched out before anything
gets committed to code. That might be an unreasonable goal for a game jam, but
I really believe that good prep cuts down on development time enough that I'll
actually get the game done sooner by focus on good prep. We'll see.

# Nov 4 #
I'm continuing to watch my YouTube tutorial. Godot is actually pretty intuitive,
but I need to read up on signals. I want to create all of my data types as
classes and it's taking some re-thinking to understand how they're all going to
be Nodes instead. I think I can have the basic functionalities of the text game
built in another week.

I am thinking a lot about the text parser. I would like to build the game to
interpret any arbitrary sentence, but we all know that it will be much easier
to limit the player to a set list of commands. I think that the compromise I'm
going to use is a built in command list with each command having a list of
synonyms. That should make the command system pretty flexible without being too
much work to finish.

I have started working on an item list and I'll start working on a list of ants
too. But that sort of thing is going to have to be built up along with the actual
game. Still though, its nice to see the mechanical side and the narrative side
of the game growing simultaneously.

After re-reading the theme announcement, I noticed that "bug out" was actually
mentioned as one of the official interpretations of the Bug! theme. This might
mean that my game isn't as unique as I'd been hoping that it would be. It's
going to be really hard to stand out amongst the now 7000 entrants. The text
game aspect should hopefully help me stand out (although I don't know if that
will be in a good or bad way). But I think I'm going to need some more "X
factor" kind of stuff. I might start asking around for a few nice songs to make
a soundtrack with. Different rooms could trigger different tracks, so like a
tunnel theme, and a kitchen theme, and a thrown room theme. Plus a menu song and
a few end screen themes. So maybe 9 songs. It seems like a lot, but I still have
3 and a half weeks to figure that out.

Speaking of the end screen, I think that will be a great way to catch some
attention and to encourage replaying, but I'll need to quickly make people aware
of the fact that multiple endings exist. One thought I've had about that is
adding the ending name to the high score screen. Also, a personalized description
on the end screen should help make players aware that the ending has been
tailored to their actions.

This project is starting to look achievable.

# Nov 5 #
I'm going to need to be carefully balancing work/school life with this project
for the next little bit. I'm working on a couple of things for school and I need
to be better about giving them priority. None the less, I'm going to keep giving
this project attention. I'm hoping that if I get the mechanical, difficult
portion hashed out soon, then I'll have an easier time focusing on the fun,
creative bits of IJOA in small chunks. I really need to code in several-hour
chunks for the time to be useful, but creative stuff I can jump into in 10is
minute segments if that's what I need to do.

Oh! I don't know if I've recorded it here yet, but the game has a working title.
I'm Just One Ant. I'm hoping to dial into people's frustration and resonate with
their desire to make positive changes with limited resources. I haven't named
the protagonist ant though. Do I even need to?

# Nov 9 #
Didn't do much development-wise over the weekend. Some of that is that I have
a journal article that needs attention but also... I just didn't. It's really
hard not to burn out at this time in the semester.

I'm starting to add class files to represent Rooms and Items and Ants and other
little game-world nouns. This is the first big difference between Python and
Godot that I've had to deal with. I want to just puch ahead with putting classes
in a nice little file, import that file wherever it's needed, and use the class
like a class. The tutorial I've been following builds these sorts of game-world
nouns as nodes rather than classes. So each thing has a physical representation
in the game, that is just off-camera and not visible to the player.

I blanched a little at the idea of abstract representations actually existing in
the 2D scene so I pressed ahead with trying to make every class a class instead
of a node. And... I'm wondering if it would be smarter to stay with the
tutorial. I thought of all this cool things I could do programmatically like
revealing hidden exits if the user has certain items and I didn't think that
that would work with a node. But maybe it would have. Maybe I'm being pointlessly
obstinant by sticking with the style of development that I'm used to.

I think that for now I'm going to stick with my stupid obstinant method, but
here's the record. If everything goes wrong, this is where it started.
